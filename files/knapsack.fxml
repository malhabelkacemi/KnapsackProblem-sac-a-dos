<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane id="AnchorPane" prefHeight="661.0" prefWidth="742.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="malha_taous.KnapsackController">
   <children>
      <ImageView fitHeight="661.0" fitWidth="743.0" opacity="0.74" pickOnBounds="true">
         <image>
            <Image url="@HTB1A9VcbUGF3KVjSZFoq6zmpFXap.jpg" />
         </image>
      </ImageView>
      <Label fx:id="label" layoutX="114.0" layoutY="14.0" prefHeight="50.0" prefWidth="529.0" text="What is knapsack problem?">
         <font>
            <Font name="Times New Roman Bold Italic" size="46.0" />
         </font>
      </Label>
      <Button fx:id="returnKp" layoutX="287.0" layoutY="611.0" mnemonicParsing="false" onAction="#returnAction" prefHeight="36.0" prefWidth="170.0" style="-fx-background-radius: 25;" text="Return">
         <font>
            <Font name="Times New Roman Bold" size="18.0" />
         </font>
      </Button>
      <TextArea layoutX="83.0" layoutY="152.0" opacity="0.73" prefHeight="336.0" prefWidth="591.0" style="-fx-border-width: 5px 5px 5px; -fx-border-color: grey; -fx-background-color: grey;" text=" The knapsack problem is a problem in &#10;combinatorial optimization. It's used to &#10;model a situation where you have to fill&#10; a backpack with objects of different&#10; weights and values. The main goal is to &#10;fill the knapsack  with the highest possible&#10; value, not exceeding the maximum weight.">
         <font>
            <Font name="Times New Roman Italic" size="31.0" />
         </font>
      </TextArea>
   </children>
</AnchorPane>
